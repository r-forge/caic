tmp <- rcoal(15)
plot(tmp)
tmp <- as(tmp, "phylo4")
plot(tmp)
tmp
tmp2 <- new("phylo4")
tmp2
summary(tmp2)
summary(tmp)
 x<- summary(tmp)
x
help(package=phylo4)
?phylo4d
tmp
x <- data.frame(tip=paste("t", 1:30,sep=""), trait1=rnorm(30))
tmpd <- phylo4d(tmp,x)
tmpd
str()tmpd)
str(tmpd)
?check.phylo4d
?phylo4:::check.phylo4d
phylo4:::check.phylo4d
phylo4::check.phylo4d
check.phylo4d()
?check_data
testTree <- read.tree("(ISTO:0.0605227128063,(((((((AJON:0.000328534975975,ACAN:0.000328534975975):0.000171887249026,ASKI:0.000500422225001):0.0015577841416,(AMIC:0.00175384341646,(AFLA:0.0010043739709,ACAE:0.0010043739709):0.000749469445567):0.00030436295014):0.00104798245565,(((AFOR:0.000628884256011,ACHR:0.000628884256011):0.000279627903217,ASHO:0.000908512159228):0.000563562514999,APUB:0.00147207467423):0.00163411414803):0.00294760495033,AVIR:0.00605379377258):0.00367406989309,(AFRA:0.00375042603334,((AECA:0.000684544246914,AVUL:0.000684544246914):0.000838882576537,AAUR:0.00152342682345):0.00222699920989):0.00597743763232):0.0214871454203,((IBIT:0.0114760315468,IOCC:0.0114760315468):0.00418308885758,ISAV:0.0156591204044):0.0155558886817):0.0293077037203);")
testTree <- read.tree(text="(ISTO:0.0605227128063,(((((((AJON:0.000328534975975,ACAN:0.000328534975975):0.000171887249026,ASKI:0.000500422225001):0.0015577841416,(AMIC:0.00175384341646,(AFLA:0.0010043739709,ACAE:0.0010043739709):0.000749469445567):0.00030436295014):0.00104798245565,(((AFOR:0.000628884256011,ACHR:0.000628884256011):0.000279627903217,ASHO:0.000908512159228):0.000563562514999,APUB:0.00147207467423):0.00163411414803):0.00294760495033,AVIR:0.00605379377258):0.00367406989309,(AFRA:0.00375042603334,((AECA:0.000684544246914,AVUL:0.000684544246914):0.000838882576537,AAUR:0.00152342682345):0.00222699920989):0.00597743763232):0.0214871454203,((IBIT:0.0114760315468,IOCC:0.0114760315468):0.00418308885758,ISAV:0.0156591204044):0.0155558886817):0.0293077037203);")
plot(testTree)
axis(1)
testDat <- data.frame(taxon=c("ISTO","AJON","ACAN","ASKI","AMIC","AFLA","ACAE",#
				"AFOR","ACHR","ASHO","APUB","AVIR","AFRA","AECA","AVUL","AAUR",#
				"IBIT","IOCC","ISAV") ,trait=c(0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0))
phy <- test.tree
phy <- testTree
	phy$edge.length <- with(phy, edge.length * 1 /sum(edge.length))
plot(phy)
plot(testTree)
axis(1)
plot(phy)
axis(1)
sum(phy$edge.length)
branching.times(testTree)
help.search("root")
?branching.times
max(branching.times(testTree))
phy <- testTree
	phy$edge.length <- with(phy, edge.length * 1 /max(branching.times(phy)))
plot(phy)
axis(1)
	lambda <- (length(phy$tip.label) - 2) / sum(phy$edge.length)
lmbda
lambda
?pt
curve(pt)
curve(pt, df=10)
curve(pt(x, df=10))
curve(pt(x, df=10), xlim=c(-3,3))
90/7
90%%7
library(ape)
?ace
phy
phyTab <- phy$edge
phyTab
phyTab <- as.data.frame(phy$edge)
phyTab
phyTab <- as.data.frame(phy$edge, col.name=c("anc","desc"))
phyTab
phyTab <- as.data.frame(phy$edge, colnames=c("anc","desc"))
phyTab
?as.data.frame
    colnames(phyTab) <- c("anc","desc")
phyTab
    phyTab$BirthTime <- phyTab$currBL <- phyTab$DeathTime <- NA
phyTab
    phyTab <- as.data.frame(phy$edge)#
    colnames(phyTab) <- c("anc","desc")#
    phyTab$DeathTime  <- phyTab$currBL <- phyTab$BirthTime  <- NA
phyTab
phy
print.phy
print.phylo
    root <- length(phy$tip.label) + 1#
    phyTab$birthTime[phyTab$anc == root] <- 0
phyTab
    phyTab <- as.data.frame(phy$edge)#
    colnames(phyTab) <- c("anc","desc")#
    phyTab$deathTime  <- phyTab$currBL <- phyTab$birthTime  <- NA #
#
    # birth the tips#
    root <- length(phy$tip.label) + 1#
    phyTab$birthTime[phyTab$anc == root] <- 0
phyTab
    phyTab[phyTab$anc == root, c("birthTime", "currBL")] <- 0
phyTab
with(phyTab, sum(! is.na(currBL)))
with(phyTab, sum((! is.na(currBL)) & is.na(deathTime)))
with(phyTab, which((! is.na(currBL)) & is.na(deathTime)))
      extantLin <- with(phyTab, which((! is.na(currBL)) & is.na(deathTime)))#
        wait <- rexp(1, lambda * length(extantLin))#
        #
        phyTab$currBL[extantLin] <- phyTab$currBL[extantLin] + wait
phyTab
        specLin <- sample(extantLin)
specLin
        specLin <- sample(extantLin, 1)
specLin
sample(c(10,3,2), 1)
sample(c(10,3,2), 1)
sample(c(10,3,2), 1)
sample(c(10,3,2), 1)
       # pick the speciating lineage, kill it and birth the descendents#
        specLin <- sample(extantLin, 1)#
        specNode <- phyTab$anc[specLin]#
        phyTab$deathTime[specLin] <- phyTab$currBL[specLin] + phyTab$birthTime[specLin]#
        phyTab[phyTab$anc == specNode, c("birthTime", "currBL")] <- 0
phyTab
specNode
    phyTab <- as.data.frame(phy$edge)#
    colnames(phyTab) <- c("anc","desc")#
    phyTab$deathTime  <- phyTab$currBL <- phyTab$birthTime  <- NA #
#
    # birth the tips and initiate their branch length#
    root <- length(phy$tip.label) + 1#
    phyTab[phyTab$anc == root, c("birthTime", "currBL")] <- 0
      extantLin <- with(phyTab, (! is.na(currBL)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))
extantLin
       phyTab$currBL[extantLin] <- phyTab$currBL[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & phyTab$node > root)
possSpec
extantLin
    colnames(phyTab)[1:2] <- c("parent","node")
which(extantLin & phyTab$node > root)
        specLin <- sample(extantLin, 1)#
        specNode <- phyTab$anc[specLin]#
        phyTab$deathTime[specLin] <- phyTab$currBL[specLin] + phyTab$birthTime[specLin]#
        phyTab[phyTab$parent == specNode, c("birthTime", "currBL")] <- 0
phyTab
specLin
possSpec
extantLin
        possSpec <- which(extantLin & phyTab$node > root)
possSpec
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$anc[specLin]#
        phyTab$deathTime[specLin] <- phyTab$currBL[specLin] + phyTab$birthTime[specLin]#
        phyTab[phyTab$parent == specNode, c("birthTime", "currBL")] <- 0
specLin
phyTab
specNode
        specNode <- phyTab$node[specLin]#
        phyTab$deathTime[specLin] <- phyTab$currBL[specLin] + phyTab$birthTime[specLin]#
        phyTab[phyTab$parent == specNode, c("birthTime", "currBL")] <- 0
phyTab
       # get the waiting time given the number of lineages and grow#
        extantLin <- with(phyTab, (! is.na(currBL)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$currBL[extantLin] <- phyTab$currBL[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & phyTab$node > root)#
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$node[specLin]#
        phyTab$deathTime[specLin] <- phyTab$currBL[specLin] + phyTab$birthTime[specLin]#
        phyTab[phyTab$parent == specNode, c("birthTime", "currBL")] <- 0
phyTab
    phyTab <- as.data.frame(phy$edge)#
    colnames(phyTab) <- c("parent","node")#
    phyTab$deathTime  <- phyTab$currBL <- phyTab$birthTime  <- NA #
#
    # birth the tips and initiate their branch length#
    root <- length(phy$tip.label) + 1#
    phyTab[phyTab$parent == root, c("birthTime", "currBL")] <- 0#
    #
    # until every lineage is born, loop through speciations..#
    while(any(is.na(phyTab$birthTime))){#
        #
        # get the waiting time given the number of lineages and grow#
        extantLin <- with(phyTab, (! is.na(currBL)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$currBL[extantLin] <- phyTab$currBL[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & phyTab$node > root)#
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$node[specLin]#
        currTime <- phyTab$currBL[specLin] + phyTab$birthTime[specLin]#
        phyTab$deathTime[specLin] <- currTime#
        phyTab$currBL[phyTab$parent == specNode] <- 0#
        phyTab$birthTime[phyTab$parent == specNode] <- currTime#
                #
    }
phyTab
phy <- rcoal(5)
phy
   phyTab <- as.data.frame(phy$edge)#
    colnames(phyTab) <- c("parent","node")#
    phyTab$deathTime  <- phyTab$currBL <- phyTab$birthTime  <- NA #
#
    # birth the tips and initiate their branch length#
    root <- length(phy$tip.label) + 1#
    phyTab[phyTab$parent == root, c("birthTime", "currBL")] <- 0
plot(phy)
      # get the waiting time given the number of lineages and grow#
        extantLin <- with(phyTab, (! is.na(currBL)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$currBL[extantLin] <- phyTab$currBL[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & phyTab$node > root)#
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$node[specLin]#
        currTime <- phyTab$currBL[specLin] + phyTab$birthTime[specLin]#
        phyTab$deathTime[specLin] <- currTime#
        phyTab$currBL[phyTab$parent == specNode] <- 0#
        phyTab$birthTime[phyTab$parent == specNode] <- currTime
phyTab
        # get the waiting time given the number of lineages and grow#
        extantLin <- with(phyTab, (! is.na(currBL)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$currBL[extantLin] <- phyTab$currBL[extantLin] + wait
phyTab
   # to a data frame#
    phyTab <- as.data.frame(phy$edge)#
    colnames(phyTab) <- c("parent","node")#
    phyTab$deathTime  <- phyTab$blen <- phyTab$birthTime  <- NA #
#
    # birth the tips and initiate their branch length#
    root <- length(phy$tip.label) + 1#
    phyTab[phyTab$parent == root, c("birthTime", "blen")] <- 0
phyTab
      # get the waiting time given the number of lineages and grow#
        extantLin <- with(phyTab, (! is.na(blen)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$blen[extantLin] <- phyTab$blen[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & phyTab$node > root)#
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$node[specLin]#
        currTime <- phyTab$blen[specLin] + phyTab$birthTime[specLin]#
        phyTab$deathTime[specLin] <- currTime#
        phyTab$blen[phyTab$parent == specNode] <- 0#
        phyTab$birthTime[phyTab$parent == specNode] <- currTime
phyTab
      # get the waiting time given the number of lineages and grow#
        extantLin <- with(phyTab, (! is.na(blen)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$blen[extantLin] <- phyTab$blen[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & phyTab$node > root)#
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$node[specLin]#
        currTime <- phyTab$blen[specLin] + phyTab$birthTime[specLin]#
        phyTab$deathTime[specLin] <- currTime#
        phyTab$blen[phyTab$parent == specNode] <- 0#
        phyTab$birthTime[phyTab$parent == specNode] <- currTime
phyTab
      # get the waiting time given the number of lineages and grow#
        extantLin <- with(phyTab, (! is.na(blen)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$blen[extantLin] <- phyTab$blen[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & phyTab$node > root)#
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$node[specLin]#
        currTime <- phyTab$blen[specLin] + phyTab$birthTime[specLin]#
        phyTab$deathTime[specLin] <- currTime#
        phyTab$blen[phyTab$parent == specNode] <- 0#
        phyTab$birthTime[phyTab$parent == specNode] <- currTime
phyTab
    phyTab <- as.data.frame(phy$edge)#
    colnames(phyTab) <- c("parent","node")#
    phyTab$deathTime  <- phyTab$blen <- phyTab$birthTime  <- NA #
#
    # birth the tips and initiate their branch length#
    root <- length(phy$tip.label) + 1#
    phyTab[phyTab$parent == root, c("birthTime", "blen")] <- 0#
    #
    # until every lineage is born, loop through speciations..#
    while(any(is.na(phyTab$birthTime))){#
        #
        # get the waiting time given the number of lineages and grow#
        extantLin <- with(phyTab, (! is.na(blen)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$blen[extantLin] <- phyTab$blen[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & (phyTab$node > root))#
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$node[specLin]#
        currTime <- phyTab$blen[specLin] + phyTab$birthTime[specLin]#
        phyTab$deathTime[specLin] <- currTime#
        phyTab$blen[phyTab$parent == specNode] <- 0#
        phyTab$birthTime[phyTab$parent == specNode] <- currTime#
                #
    }
phyTab
source("~/Desktop/stochDiv.R")
source("~/Desktop/stochDiv.R")
source("~/Desktop/stochDiv.R")
?while
()
?"while"
source("~/Desktop/stochDiv.R")
source("~/Desktop/stochDiv.R")
yuleBL(phy)
    phyTab <- as.data.frame(phy$edge)#
    colnames(phyTab) <- c("parent","node")#
    phyTab$deathTime  <- phyTab$blen <- phyTab$birthTime  <- NA #
#
    # birth the tips and initiate their branch length#
    root <- length(phy$tip.label) + 1#
    phyTab[phyTab$parent == root, c("birthTime", "blen")] <- 0
phyTab
       extantLin <- with(phyTab, (! is.na(blen)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$blen[extantLin] <- phyTab$blen[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & (phyTab$node > root))#
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$node[specLin]#
        currTime <- phyTab$blen[specLin] + phyTab$birthTime[specLin]#
        phyTab$deathTime[specLin] <- currTime#
        phyTab$blen[phyTab$parent == specNode] <- 0#
        phyTab$birthTime[phyTab$parent == specNode] <- currTime
phyTab
       extantLin <- with(phyTab, (! is.na(blen)) & is.na(deathTime))#
        wait <- rexp(1, lambda * sum(extantLin))#
        phyTab$blen[extantLin] <- phyTab$blen[extantLin] + wait#
        #
        # pick the speciating lineage from those extant lineages which are internal#
        # nodes and then kill it and birth the descendents#
        possSpec <- which(extantLin & (phyTab$node > root))#
        specLin <- sample(possSpec, 1)#
        specNode <- phyTab$node[specLin]#
        currTime <- phyTab$blen[specLin] + phyTab$birthTime[specLin]#
        phyTab$deathTime[specLin] <- currTime#
        phyTab$blen[phyTab$parent == specNode] <- 0#
        phyTab$birthTime[phyTab$parent == specNode] <- currTime
phyTab
possSpec
specLin
?sample
source("~/Desktop/stochDiv.R")
yuleBL(phy)
x <- yuleBL(phy)
?structure
source("~/Desktop/stochDiv.R")
x <- yuleBL(phy)
x
plot(x)
plot(phy)
plot(x)
plot(yuleBL(phy))
plot(yuleBL(phy))
plot(yuleBL(phy))
plot(yuleBL(phy))
x <- rcoal(100)
plot(yuleBL(x)))
plot(yuleBL(x))
plot(x)
plot(yuleBL(x))
system.time(replicate(1000, yuleBL(x)))
system.time(replicate(1000, exponentialTree(x)))
system.time(yGam <- replicate(1000, iGam(yuleBL(x))))
system.time(expGam <- replicate(1000, iGam(exponentialTree(x))))
par(mfrow=c(1,2))
?density
plot.density(yGam)
str(yGam)
plot(density(yGam))
plot(density(yGam))
plot(density(expGam))
par(mfrow=c(2,1))
plot(density(yGam))
plot(density(expGam))
x <- rcoal(30)
system.time(yGam <- replicate(10000, iGam(yuleBL(x))))
system.time(yGam <- replicate(10000, iGam(exponentialTree(x))))
expGam <- yGam
system.time(yGam <- replicate(10000, iGam(yuleBL(x))))
plot(density(yGam))
plot(density(expGam))
curve(dnorm(x), add=TRUE)
curve(dnorm(x), add=TRUE, co="red")
plot(density(yGam))
curve(dnorm(x), add=TRUE, co="red")
plot(density(expGam))
curve(dnorm(x), add=TRUE, co="red")
install.packages("mvtnorm")
install.packages("msm")
install.packages("ouch")
library(geiger)
likelihoodDiscrete()
geiger:::likelihoodDiscrete()
geiger:::likelihoodDiscrete()
tmp
dat <- sample(c(0,1), 15, replace=TRUE)
geiger:::qetQ(0.5, 2)
geiger:::getQ(0.5, 2)
geiger:::getQ(0.5, 2,"ER")
dat
names(dat) <- phy$tip.label
geiger:::likelihoodDiscrete(phy,dat,q=0.5)
geiger:::likelihoodDiscrete(phy,dat,q=0.5, returnFull)
geiger:::likelihoodDiscrete(phy,dat,q=0.5, returnFull=TRUE)
x <- geiger:::likelihoodDiscrete(phy,dat,q=0.5, returnFull=TRUE)
sum(x$l)
?import
?export
?Namespace
?namespace
help.search("namespae")
a <- c(1,3,-5)
b <- c(4,-2,-1)
sum(a*b)
t(a)%*%b
nlevels(gl(3,6))
trait
dat
trait <-dat
    nStates <- nlevels(trait))#
    if(is.null(Q)) {#
        Q <- matrix(1/nStates, ncol=nStates, nrow=nStates)#
        diag(Q) <- -1#
    }
    nStates <- nlevels(trait)#
    if(is.null(Q)) {#
        Q <- matrix(1/nStates, ncol=nStates, nrow=nStates)#
        diag(Q) <- -1#
    }
Q
Q <- matrix(1/nStates, ncol=nStates, nrow=nStates)
Q
nStates
    nStates <- nlevels(as.factor(trait))
Q <- matrix(1/nStates, ncol=nStates, nrow=nStates)
Q
        diag(Q) <- -1
Q
